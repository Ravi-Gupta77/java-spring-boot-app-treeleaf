---
name: Terraform - Plan||Apply
run-name: "[${{ github.event_name }} - ${{ github.ref_name }}] Terraform executed by @${{ github.actor }}"

on:
  push:
    branches:
      - dev
      - stage
      - main
    paths-ignore:
      - 'README.md'
      - 'helm/**'


  pull_request:
    branches:
      - dev
      - stage
      - main
    paths-ignore:
      - 'README.md'
      - 'helm/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
    terraformWorkDir: ./
    terraformModulesGithubOrg: terraform-aws-module-template
    # terraformVersion: 4.0.0
    awsRegion: "us-east-1"
    envDev : "dev"
    awsAcoountNumberDev : ${{ secrets.AWS_ACCOUNT_DEV }}
    databaseUserDev     : ${{ secrets.DATABASE_USER_DEV }}
    envUat : "uat"
    awsAcoountNumberUat : ${{ secrets.AWS_ACCOUNT_UAT }}
    databaseUserUat     : ${{ secrets.DATABASE_USER_UAT }}
    envProd : "prod"
    awsAcoountNumberProd : ${{ secrets.AWS_ACCOUNT_PROD }}
    databaseUserProd     : ${{ secrets.DATABASE_USER_PROD }}
  
    #Application secrets
    TF_VAR_secret_key    : ${{ secrets.DJANGO_SECRET }}
    TF_VAR_email_port    : ${{ secrets.EMAIL_PORT }}
    TF_VAR_email_host         : ${{ secrets.EMAIL_HOST }}
    TF_VAR_email_host_user     : ${{ secrets.EMAIL_HOST_USER }}
    TF_VAR_email_host_password : ${{ secrets.EMAIL_PASSWORD }}
    TF_VAR_app_tier_api_token   : ${{ secrets.APP_API_TOKEN }}


jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Format
        run: terraform fmt --check

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -upgrade -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  Deploy:
    name: Terraform Plan|Apply
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Sets env vars for dev
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAcoountNumberDev }}:role/Github-OIDC-Role" >> $GITHUB_ENV
          echo "terraformBucket=fictonica-${{ env.envDev }}-tf-state" >> $GITHUB_ENV
          echo "terraformDynamo=fictonica-${{ env.envDev }}-tf-state" >> $GITHUB_ENV
          echo "terraformBucketKey=fictonica-${{ env.envDev }}-tf-state.tfstate" >> $GITHUB_ENV
          echo "varfile=${{ env.envDev }}.tfvars" >> $GITHUB_ENV
          echo "TF_VAR_username=${{ env.envDev }}_${{ env.databaseUserDev }}" >> $GITHUB_ENV

        if: ${{ (github.ref_name == 'dev') || ( github.base_ref == 'dev') }}

      - name: Sets env vars for UAT
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAcoountNumberUat }}:role/Github-OIDC-Role" >> $GITHUB_ENV
          echo "terraformBucket=fictonica-${{ env.envUat }}-tf-state" >> $GITHUB_ENV
          echo "terraformDynamo=fictonica-${{ env.envUat }}-tf-state" >> $GITHUB_ENV
          echo "terraformBucketKey=fictonica-${{ env.envUat }}-tf-state.tfstate" >> $GITHUB_ENV
          echo "varfile=${{ env.envUat }}.tfvars" >> $GITHUB_ENV
          echo "TF_VAR_username=${{ env.envUat }}_${{ env.databaseUserUat }}" >> $GITHUB_ENV

        if: ${{ (github.ref_name == 'stage') || ( github.base_ref == 'stage') }}

      - name: Sets env vars for Prod
        run: |
          echo "awsIamRole=arn:aws:iam::${{ env.awsAcoountNumberProd }}:role/Github-OIDC-Role" >> $GITHUB_ENV
          echo "terraformBucket=fictonica-${{ env.envProd }}-tf-state" >> $GITHUB_ENV
          echo "terraformDynamo=fictonica-${{ env.envProd }}-tf-state" >> $GITHUB_ENV
          echo "terraformBucketKey=fictonica-${{ env.envProd }}-tf-state.tfstate" >> $GITHUB_ENV
          echo "varfile=${{ env.envProd }}.tfvars" >> $GITHUB_ENV
          echo "TF_VAR_username=${{ env.envProd }}_${{ env.databaseUserProd }}" >> $GITHUB_ENV

        if: ${{ (github.ref_name == 'main') || ( github.base_ref == 'main') }}

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.awsIamRole }}
          aws-region: ${{ env.awsRegion }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}"  -backend-config="region=${{ env.awsRegion }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey }}"

      - name: Terraform Plans
        id: plan
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform plan  -var-file=./environment/${{ env.varfile }} -no-color -out tfplan

      - name: Upload Terraform Plan File
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.terraformWorkDir }}/tfplan
          retention-days: 3

      - name: Terraform Show
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        id: show
        run: |-
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' | tail -c 35000 \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > /tmp/plan.txt
          PLAN=$(cat /tmp/plan.txt)

      - name: Post Plan to GitHub PR
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## Terraform Plan
            ### Environment: ${{ github.base_ref }}
            ### Region: us-east-1
            ***Author***: `${{ github.actor }}` ***Action***: `${{ github.event_name }}`
            ***Working Directory***: `${{ env.terraformWorkDir }}`
            ***Workflow***: `${{ github.workflow }}`
            this is test
            Please review below Terraform plan before accepting merge request:
            ```diff
            ${{ steps.plan.outputs.stdout }}
            ```

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## Terraform Plan
            ### Environment: ${{ github.base_ref }}
            ### Region: us-east-1
            ***Author***: `${{ github.actor }}` ***Action***: `${{ github.event_name }}`
            ***Working Directory***: `${{ env.terraformWorkDir }}`
            ***Workflow***: `${{ github.workflow }}`
            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Stop pipeline if failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push'
        id: apply
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform apply -auto-approve  -var-file=./environment/${{ env.varfile }} -no-color
